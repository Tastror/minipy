#line 1 "src-gen/compiler_flex.cpp"

#line 3 "src-gen/compiler_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 118
#define YY_END_OF_BUFFER 119
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[291] =
    {   0,
        0,    0,    5,    5,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  119,  117,
        1,    2,    2,  117,   36,    3,   48,   51,   35,   37,
       38,   45,   43,   29,   44,   33,   46,   14,   14,   30,
       32,   61,   63,   62,   50,  116,  116,  116,  116,   39,
       40,   53,   78,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
       41,   52,   42,   54,    5,    4,    4,   11,   10,    7,
        7,    9,   12,   12,   13,   13,   18,   22,   22,   21,
       18,   24,   28,   28,   27,   24,   20,   20,   19,   26,

       26,   25,    1,    2,   58,   69,   72,   49,   66,   64,
       65,   31,    0,   16,   47,   67,   16,   14,  117,  117,
      117,  117,  117,  117,   14,   55,   59,   57,   60,   56,
       71,  116,  116,  116,  116,  116,   74,  116,  116,  108,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,   95,  116,   86,   85,  116,  116,  116,   83,
      116,  116,  116,  116,  116,  116,   73,   75,    5,    4,
       10,    6,    6,    8,    7,   18,   22,   17,   24,   28,
       23,   70,   34,    0,   68,  117,  117,  117,  117,   14,
        0,   15,   14,   14,   14,   76,   77,  116,  116,  116,

      116,  116,   82,  116,  116,  116,  116,  116,  116,   88,
      105,  116,  116,  116,  116,   98,  116,  116,  116,  116,
      116,  116,   84,  116,  116,  116,  110,  116,  116,    6,
       15,  116,   79,   80,  114,  116,  116,  116,  116,  102,
      116,  116,   97,   96,  116,  116,  107,  116,  116,  116,
      116,  116,   87,  116,  116,  116,  116,   81,  115,  116,
       93,   99,   91,  116,  116,  116,  116,  116,  116,  101,
      116,  109,  116,   94,   90,  113,  116,  111,  116,  103,
      106,   92,  116,   89,  116,  112,  116,  100,  104,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,    1,   29,   30,   30,   30,   30,   30,   31,
       32,   32,   32,   32,   32,   32,   32,   33,   32,   32,
       32,   32,   32,   34,   32,   32,   32,   32,   32,   32,
       35,   36,   37,   38,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   32,   49,   50,   51,   52,
       53,   54,   32,   55,   56,   57,   58,   32,   59,   60,
       61,   32,   62,   63,   64,   65,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    4,    1,    1,    1,
        5,    1,    1,    1,    1,    1,    1,    6,    1,    7,
        7,    7,    7,    1,    1,    1,    1,    1,    1,    7,
        7,    7,    7,    7,    1,    1,    1,    1,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[307] =
    {   0,
        0,    0,   63,   65,   68,   75,  377,  372,  336,  335,
       71,   81,   83,   90,   77,   85,   91,   95,  337, 1023,
       98,  332,  332,  300, 1023, 1023,  285,  283, 1023, 1023,
     1023,   77,  281, 1023,   78,   90,   82,  100,  107, 1023,
     1023,   88,  279,  104,  261,  113,  117,  125,  141, 1023,
     1023,  255,  145,  149,  100,  133,  135,  143,  158,  148,
      164,  172,  178,  173,  183,  193,  203,  198,  204,  213,
     1023,  243, 1023,  240,    0,  262,  255, 1023,  172,  244,
      243, 1023, 1023, 1023, 1023, 1023,    0,  240,  238, 1023,
      229,    0,  232,  224, 1023,  214, 1023, 1023, 1023, 1023,

     1023, 1023,  217, 1023, 1023, 1023, 1023,  170, 1023, 1023,
     1023, 1023,  172,  253,  161, 1023,  257,  263,  269,  273,
      282,  294,  298,  302,  308,  155, 1023, 1023, 1023,  154,
     1023,    0,  212,  298,  282,  297, 1023,  310,  308,  309,
      319,  328,  318,  333,  327,  343,  342,  354,  348,  353,
      362,  364,  370,  376,  375,  381,  387,  392,  398,  400,
      406,  412,  417,  411,  427,  433, 1023, 1023,    0, 1023,
      491,  154,  151, 1023, 1023,    0, 1023, 1023,    0, 1023,
     1023, 1023, 1023,  483, 1023,  489,  495,    0,  499,  122,
      503,  507,  278,  520,    0, 1023, 1023,  428,  493,  514,

      479,  516,  524,  525,  530,  539,  541,  540,  549,  551,
      557,  559,  568,  570,  579,  569,  581,  589,  590,  595,
      608,  603,  609,  614,  619,  624,  625,  635,  636, 1023,
      533,  645,  644,  646,  654,  655,  663,  664,  675,  673,
      674,  687,  685,  686,  695,  700,  701,  715,  706,  720,
      721,  729,  731,  740,  739,  745,  750,  751,  756,  761,
      767,  769,  775,  777,  783,  791,  796,  797,  805,  806,
      817,  811,  816,  822,  827,  828,  833,  838,  843,  844,
      849,  854,  867,  859,  865,  873,  878,  879,  884, 1023,
      943,  950,  957,  964,  971,  978,  985,  992,  994,  143,

     1001, 1008, 1015,  142,  117,  109
    } ;

static const flex_int16_t yy_def[307] =
    {   0,
      290,    1,  291,  291,  292,  292,  293,  293,  294,  294,
      295,  295,  296,  296,  297,  297,  298,  298,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  299,  299,  290,
      290,  290,  290,  290,  290,  300,  300,  300,  300,  290,
      290,  290,  300,  300,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
      290,  290,  290,  290,  301,  290,  301,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  302,  290,  290,  290,
      302,  303,  290,  290,  290,  303,  290,  290,  290,  290,

      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  299,  299,  304,
      304,  304,  304,  304,  299,  290,  290,  290,  290,  290,
      290,  305,   54,   54,   54,   54,  290,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,  290,  290,  301,  290,
      290,  290,  290,  290,  290,  302,  290,  290,  303,  290,
      290,  290,  290,  290,  290,  299,  299,  306,  304,  306,
      290,  306,  306,  306,  124,  290,  290,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,  290,
      290,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,    0,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,

      290,  290,  290,  290,  290,  290
    } ;

static const flex_int16_t yy_nxt[1089] =
    {   0,
       20,   21,   22,   23,   21,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   39,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   46,   48,   49,   50,   20,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   46,   61,   46,   62,
       63,   64,   65,   66,   67,   46,   68,   46,   69,   46,
       70,   71,   72,   73,   74,   76,   77,   76,   77,   79,
       80,   81,   79,   88,   89,   82,   79,   80,   81,   79,
       98,   90,   82,   88,   89,   93,   94,   99,   98,   95,
      108,   90,   93,   94,  101,   99,   95,  102,  101,  103,

      115,  102,  103,  109,  111,  112,   91,  113,  116,  114,
      114,  114,  114,  126,  127,  188,   91,  117,   96,  118,
      119,  119,  119,  132,  117,   96,  125,  125,  125,  125,
      129,  130,  132,  132,  132,  132,  132,  132,  132,  132,
      121,  190,  190,  122,  132,  132,  132,  132,  189,  133,
      122,  133,  123,  230,  142,  133,  134,  230,  133,  124,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  143,  171,  172,  173,  171,  135,  146,  174,
      197,  196,  144,  138,  133,  145,  133,  185,  133,  183,
      133,  133,  147,  133,  133,  136,  182,  152,  133,  133,

      139,  133,  148,  133,  140,  149,  133,  141,  153,  133,
      150,  157,  151,  133,  154,  155,  133,  158,  103,  156,
      181,  103,  133,  133,  133,  159,  180,  133,  133,  133,
      133,  133,  161,  133,  133,  180,  133,  160,  133,  178,
      177,  133,  162,  177,  133,  175,  163,  175,  133,  133,
      165,  133,  164,  133,  133,  133,  133,  170,  133,  133,
      166,  133,  133,  133,  133,  170,  168,  133,  133,  167,
      133,  133,  114,  114,  114,  114,  114,  114,  114,  114,
      117,  137,  118,  119,  119,  119,  117,  131,  186,  187,
      187,  187,  188,  188,  188,  188,  184,  193,  193,  193,

      184,  190,  190,  188,  188,  128,  122,  110,  191,  107,
      191,  106,  122,  192,  192,  192,  192,  193,  193,  193,
      188,  194,  194,  194,  194,  117,  105,  125,  125,  125,
      125,  195,  195,  199,  104,  104,  290,  133,   86,   86,
      133,  195,  195,  195,  195,  195,  195,  198,  133,  133,
      203,  122,  133,  133,  200,  133,  133,  201,  205,  133,
      133,  133,  202,  133,  204,  133,  133,  133,  133,  133,
      133,  206,  208,  207,  133,   84,  133,  133,  209,  133,
       84,  290,  133,  133,  133,  133,  133,  210,  133,  212,
      290,  133,  211,  133,  133,  214,  290,  213,  133,  215,

      133,  133,  290,  133,  133,  133,  133,  216,  133,  133,
      290,  133,  133,  133,  217,  133,  218,  133,  290,  133,
      133,  133,  133,  290,  290,  133,  133,  133,  133,  219,
      133,  133,  133,  133,  133,  290,  133,  220,  133,  133,
      290,  290,  133,  133,  290,  133,  290,  133,  221,  222,
      133,  133,  290,  133,  223,  133,  133,  133,  133,  225,
      290,  224,  133,  133,  133,  290,  133,  133,  133,  133,
      133,  227,  133,  226,  228,  133,  229,  290,  133,  133,
      290,  290,  133,  232,  133,  133,  133,  290,  133,  290,
      290,  133,  171,  172,  173,  171,  290,  191,  174,  191,

      290,  290,  231,  231,  231,  231,  117,  290,  186,  186,
      186,  186,  117,  290,  186,  187,  187,  187,  188,  188,
      188,  188,  231,  231,  231,  231,  192,  192,  192,  192,
      235,  290,  122,  290,  133,  290,  233,  133,  122,  194,
      194,  194,  194,  290,  133,  290,  290,  290,  133,  194,
      194,  133,  231,  231,  231,  231,  290,  234,  290,  194,
      194,  194,  194,  194,  194,  133,  290,  133,  237,  133,
      290,  133,  133,  236,  133,  133,  133,  238,  239,  133,
      133,  133,  133,  133,  240,  133,  290,  290,  133,  290,
      133,  133,  133,  290,  133,  241,  133,  133,  133,  133,

      133,  290,  133,  243,  133,  242,  133,  133,  133,  133,
      133,  244,  133,  245,  133,  133,  290,  133,  246,  133,
      133,  133,  290,  133,  133,  133,  133,  133,  133,  248,
      133,  247,  133,  290,  133,  250,  133,  133,  290,  133,
      133,  133,  249,  290,  133,  133,  133,  133,  133,  251,
      133,  290,  252,  133,  133,  290,  290,  290,  133,  133,
      133,  133,  290,  133,  133,  133,  133,  133,  290,  253,
      133,  290,  133,  290,  254,  133,  133,  133,  290,  133,
      133,  255,  133,  133,  256,  257,  133,  133,  258,  290,
      133,  133,  290,  133,  133,  133,  133,  133,  290,  133,

      133,  133,  133,  133,  133,  133,  133,  290,  290,  133,
      133,  259,  133,  133,  133,  133,  290,  260,  133,  133,
      261,  133,  133,  262,  133,  133,  133,  290,  133,  263,
      133,  133,  133,  133,  264,  290,  133,  133,  133,  290,
      133,  133,  133,  133,  133,  133,  133,  290,  265,  266,
      133,  133,  133,  133,  267,  133,  133,  133,  133,  133,
      268,  133,  269,  290,  133,  290,  133,  270,  290,  290,
      133,  133,  133,  133,  290,  133,  133,  290,  133,  133,
      133,  271,  133,  272,  133,  290,  133,  133,  274,  133,
      133,  133,  275,  273,  133,  133,  133,  133,  133,  290,

      133,  133,  133,  133,  290,  133,  133,  133,  133,  133,
      290,  133,  133,  290,  133,  290,  133,  276,  133,  133,
      133,  290,  133,  290,  133,  133,  133,  133,  277,  290,
      133,  290,  133,  133,  133,  133,  290,  290,  133,  278,
      279,  133,  133,  290,  282,  280,  133,  133,  133,  133,
      290,  133,  133,  281,  133,  133,  133,  133,  283,  290,
      133,  133,  133,  133,  133,  290,  133,  284,  133,  133,
      290,  133,  133,  133,  133,  133,  290,  133,  133,  133,
      133,  290,  133,  133,  133,  133,  133,  290,  133,  133,
      285,  133,  290,  133,  133,  133,  133,  290,  133,  133,

      133,  133,  133,  286,  133,  133,  287,  133,  288,  133,
      133,  290,  133,  290,  133,  290,  133,  133,  133,  290,
      133,  290,  133,  133,  133,  133,  290,  289,  133,  133,
      133,  133,  290,  133,  133,  133,  133,  133,  290,  133,
      290,  290,  133,   75,   75,   75,   75,   75,   75,   75,
       78,   78,   78,   78,   78,   78,   78,   83,   83,   83,
       83,   83,   83,   83,   85,   85,   85,   85,   85,   85,
       85,   87,   87,   87,   87,   87,   87,   87,   92,   92,
       92,   92,   92,   92,   92,   97,   97,   97,   97,   97,
       97,   97,  100,  100,  100,  100,  100,  100,  100,  120,

      120,  169,  290,  169,  169,  169,  169,  169,  176,  290,
      290,  176,  290,  176,  176,  179,  290,  290,  290,  179,
      179,  179,   19,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290
    } ;

static const flex_int16_t yy_chk[1089] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    4,    4,    5,
        5,    5,    5,   11,   11,    5,    6,    6,    6,    6,
       15,   11,    6,   12,   12,   13,   13,   15,   16,   13,
       32,   12,   14,   14,   17,   16,   14,   17,   18,   21,

       37,   18,   21,   32,   35,   35,   11,   36,   37,   36,
       36,   36,   36,   42,   42,  306,   12,   38,   13,   38,
       38,   38,   38,  305,   39,   14,   39,   39,   39,   39,
       44,   44,   46,   46,   46,   46,   47,   47,   47,   47,
       38,  190,  190,   38,   48,   48,   48,   48,  304,  300,
       39,   55,   38,  173,   55,   55,   47,  172,   55,   38,
       49,   49,   49,   49,   53,   53,   53,   53,   54,   54,
       54,   54,   56,   79,   79,   79,   79,   48,   57,   79,
      130,  126,   56,   53,   56,   56,   57,  115,   56,  113,
       57,   56,   58,   57,   58,   49,  108,   60,   58,   60,

       54,   58,   58,   60,   54,   59,   60,   54,   61,   59,
       59,   62,   59,   59,   61,   61,   59,   63,  103,   61,
       96,  103,   61,   62,   64,   64,   94,   62,   64,   63,
       62,   64,   66,   63,   65,   93,   63,   65,   65,   91,
       89,   65,   67,   88,   66,   81,   67,   80,   66,   68,
       69,   66,   68,   68,   67,   69,   68,   77,   67,   69,
       70,   67,   69,  133,   70,   76,   74,  133,   70,   72,
      133,   70,  114,  114,  114,  114,  117,  117,  117,  117,
      118,   52,  118,  118,  118,  118,  119,   45,  119,  119,
      119,  119,  120,  120,  120,  120,  114,  193,  193,  193,

      117,  121,  121,  121,  121,   43,  118,   33,  122,   28,
      122,   27,  119,  122,  122,  122,  122,  123,  123,  123,
      123,  124,  124,  124,  124,  125,   24,  125,  125,  125,
      125,  124,  124,  135,   23,   22,   19,  135,   10,    9,
      135,  124,  124,  124,  124,  124,  124,  134,  136,  134,
      139,  125,  136,  134,  136,  136,  134,  138,  141,  139,
      140,  138,  138,  139,  140,  138,  139,  140,  138,  143,
      141,  142,  144,  143,  141,    8,  143,  141,  145,  142,
        7,    0,  145,  142,  144,  145,  142,  146,  144,  147,
        0,  144,  146,  147,  146,  148,    0,  147,  146,  149,

      147,  146,    0,  149,  150,  148,  149,  150,  150,  148,
        0,  150,  148,  151,  151,  152,  152,  151,    0,  152,
      151,  153,  152,    0,    0,  153,  155,  154,  153,  154,
      155,  154,  156,  155,  154,    0,  156,  157,  157,  156,
        0,    0,  157,  158,    0,  157,    0,  158,  158,  159,
      158,  160,    0,  159,  159,  160,  159,  161,  160,  162,
        0,  161,  164,  162,  161,    0,  164,  162,  163,  164,
      162,  164,  163,  163,  165,  163,  166,    0,  165,  198,
        0,    0,  165,  198,  166,  165,  198,    0,  166,    0,
        0,  166,  171,  171,  171,  171,    0,  184,  171,  184,

        0,    0,  184,  184,  184,  184,  186,    0,  186,  186,
      186,  186,  187,    0,  187,  187,  187,  187,  189,  189,
      189,  189,  191,  191,  191,  191,  192,  192,  192,  192,
      201,    0,  186,    0,  201,    0,  199,  201,  187,  194,
      194,  194,  194,    0,  199,    0,    0,    0,  199,  194,
      194,  199,  231,  231,  231,  231,    0,  200,    0,  194,
      194,  194,  194,  194,  194,  200,    0,  202,  204,  200,
        0,  202,  200,  202,  202,  203,  204,  205,  206,  203,
      204,  205,  203,  204,  207,  205,    0,    0,  205,    0,
      206,  208,  207,    0,  206,  208,  207,  206,  208,  207,

      209,    0,  210,  212,  209,  209,  210,  209,  211,  210,
      212,  213,  211,  214,  212,  211,    0,  212,  215,  213,
      216,  214,    0,  213,  216,  214,  213,  216,  214,  218,
      215,  217,  217,    0,  215,  220,  217,  215,    0,  217,
      218,  219,  219,    0,  218,  219,  220,  218,  219,  221,
      220,    0,  222,  220,  222,    0,    0,    0,  222,  221,
      223,  222,    0,  221,  223,  224,  221,  223,    0,  224,
      225,    0,  224,    0,  225,  226,  227,  225,    0,  226,
      227,  226,  226,  227,  228,  229,  228,  229,  232,    0,
      228,  229,    0,  228,  229,  233,  232,  234,    0,  233,

      232,  234,  233,  232,  234,  235,  236,    0,    0,  235,
      236,  236,  235,  236,  237,  238,    0,  237,  237,  238,
      238,  237,  238,  239,  240,  241,  239,    0,  240,  241,
      239,  240,  241,  239,  242,    0,  243,  244,  242,    0,
      243,  244,  242,  243,  244,  242,  245,    0,  245,  246,
      245,  246,  247,  245,  248,  246,  247,  249,  246,  247,
      249,  249,  250,    0,  249,    0,  248,  251,    0,    0,
      248,  250,  251,  248,    0,  250,  251,    0,  250,  251,
      252,  252,  253,  254,  252,    0,  253,  252,  256,  253,
      255,  254,  257,  255,  255,  254,  256,  255,  254,    0,

      256,  257,  258,  256,    0,  257,  258,  259,  257,  258,
        0,  259,  260,    0,  259,    0,  260,  260,  261,  260,
      262,    0,  261,    0,  262,  261,  263,  262,  264,    0,
      263,    0,  264,  263,  265,  264,    0,    0,  265,  265,
      266,  265,  266,    0,  269,  267,  266,  267,  268,  266,
        0,  267,  268,  268,  267,  268,  269,  270,  271,    0,
      269,  270,  272,  269,  270,    0,  272,  273,  271,  272,
        0,  273,  271,  274,  273,  271,    0,  274,  275,  276,
      274,    0,  275,  276,  277,  275,  276,    0,  277,  278,
      277,  277,    0,  278,  279,  280,  278,    0,  279,  280,

      281,  279,  280,  279,  281,  282,  283,  281,  285,  282,
      284,    0,  282,    0,  284,    0,  285,  284,  283,    0,
      285,    0,  283,  285,  286,  283,    0,  287,  286,  287,
      288,  286,    0,  287,  288,  289,  287,  288,    0,  289,
        0,    0,  289,  291,  291,  291,  291,  291,  291,  291,
      292,  292,  292,  292,  292,  292,  292,  293,  293,  293,
      293,  293,  293,  293,  294,  294,  294,  294,  294,  294,
      294,  295,  295,  295,  295,  295,  295,  295,  296,  296,
      296,  296,  296,  296,  296,  297,  297,  297,  297,  297,
      297,  297,  298,  298,  298,  298,  298,  298,  298,  299,

      299,  301,    0,  301,  301,  301,  301,  301,  302,    0,
        0,  302,    0,  302,  302,  303,    0,    0,    0,  303,
      303,  303,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[119] =
    {   0,
0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
    1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "src/lexer.l"
#line 2 "src/lexer.l"

#include <iostream>
#include <string>
#include <memory>
#include <vector>
#include <algorithm>
#include <cassert>

#include "compiler_bison.h"
#include "../src/timing.h"
#include "../src/log.h"
#include "../src/lexer.h"

int yycolumnno = 1;
size_t last_string_length;
std::string last_string;

bool block_depth_init = false;
int last_block_depth = 0;

struct BlockCell {
    bool use_tab = false;
    std::vector<int> depth_vector;
    int total_depth = 0;
    int total_num = 0;
    BlockCell() {};
    ~BlockCell() {};
    void to_tab() { use_tab = true; }
    void to_space() { use_tab = false; }
    void add(int num) {
        depth_vector.push_back(num);
        total_num += num;
        total_depth++;
    }
    bool del(int times) {
        for (int i = 0; i < times; ++i) {
            if (depth_vector.empty()) {
                return false;
            }
            total_depth--;
            total_num -= depth_vector.back();
            depth_vector.pop_back();
        }
        return true;
    }
    void clear() {
        depth_vector.clear();
        depth_vector = decltype(depth_vector)();  // free the capacity
        total_depth = total_num = 0;
    }
    // check whether_use_tab(num) == whether_use_tab(use_tab) first
    // -1: not valid
    int get_absolute_depth(int num) {
        if (total_num == num) return total_depth;
        if (num == 0) return 0;
        int res = 0;
        for (unsigned long long i = 0; i < depth_vector.size(); ++i) {
            res += depth_vector[i];
            if (res == num) return i + 1;
        }
        return -1;
    }
} block_depth_cell;

bool totally_new_line = true;
bool no_eof_yet = true;
bool no_newline_before_eof_yet = true;
int tmp_dent = 0;
Token* last_ptr = nullptr;



#define YY_USER_INIT { BEGIN(NEW_LINE_COUNT); }

#define IDN yylval.token_ptr->content.indent_num



#define SET_TOKEN_LINE_COLUMN do { \
    yylval.token_ptr->lineno = yylineno; \
    yylval.token_ptr->columnno = yycolumnno; \
} while (false)



#define LOG_TOKEN(type_string) do { \
    stdlog::log << stdlog::info \
        << "line " << yylineno << ", column " << yycolumnno \
        << ": " << type_string << ": " << yytext << stdlog::endl; \
} while (false)

#define LOG_TOKEN_WITH_VALUE(type_string, data) do { \
    stdlog::log << stdlog::info \
        << "line " << yylineno << ", column " << yycolumnno \
        << ": " << type_string << ": " << yytext \
        << ", value = " << data << stdlog::endl; \
} while (false)

#define LOG_TOKEN_NEWLINE() do { \
    stdlog::log << stdlog::info \
        << "line " << yylineno << ", column " << yycolumnno \
        << ": newline" << stdlog::endl; \
} while (false)

#define LOG_TOKEN_DENT() do { \
    stdlog::log << stdlog::info \
        << "line " << yylineno << ", column " << yycolumnno \
        << ": tab/space after a new line: " \
        << IDN.space_num << " space(s) and " \
        << IDN.tab_num << " tab(s), absolute = " \
        << IDN.absolute_depth << ", relative = " \
        << IDN.relative_depth \
        << stdlog::endl; \
} while (false)

#define LOG_TOKEN_INDENT() do { \
    stdlog::log << stdlog::info << "line " << yylineno << ": indent" << stdlog::endl; \
} while (false)

#define LOG_TOKEN_DEDENT() do { \
    stdlog::log << stdlog::info << "line " << yylineno << ": dedent" << stdlog::endl; \
} while (false)

#define LOG_TOKEN_ERROR(type_string) do { \
    stdlog::log << stdlog::error \
        << "line " << yylineno << ", column " << yycolumnno \
        << ": " << type_string << ": " << yytext << stdlog::endl; \
} while (false)

#define LOG_TOKEN_DENT_ERROR(type_string, space_num, tab_num) do { \
    stdlog::log << stdlog::error \
        << "line " << yylineno << ", column " << yycolumnno \
        << ": " << space_num << " space(s) and " << tab_num << " tab(s), " \
        << type_string << stdlog::endl; \
} while (false)



#define SAME_LINE_COLUMN_UPDATE \
    do { last_string = std::string(yytext); last_string_length = last_string.size(); yycolumnno += last_string.size(); } while (false)

#define NEW_LINE_COLUMN_UPDATE \
    do { last_string = std::string("\n"); last_string_length = 1; yycolumnno = 1; } while (false)

#define EOF_COLUMN_UPDATE \
    do { last_string = std::string(); last_string_length = 0; } while (false)



#define GENERAL_TOKEN_GEN(a, b) do { \
    yylval.token_ptr = make_token(); \
    yylval.token_ptr->type = a; \
    yylval.token_ptr->content.name = std::string(yytext); \
    SET_TOKEN_LINE_COLUMN; \
    LOG_TOKEN(b); \
    SAME_LINE_COLUMN_UPDATE; \
} while (false)

// this is because flex change the yylineno once I read \n, however I don't want it update this fast.
#define NEWLINE_TOKEN_GEN do { \
    yylval.token_ptr = make_token(); \
    yylval.token_ptr->type = token_type::newline; \
    SET_TOKEN_LINE_COLUMN; \
    yylval.token_ptr->lineno--; \
    LOG_TOKEN_NEWLINE(); \
    NEW_LINE_COLUMN_UPDATE; \
} while (false)

#define STRTEXT_TOKEN_GEN do { \
    yylval.token_ptr = make_token(); \
    yylval.token_ptr->type = token_type::strtext; \
    yylval.token_ptr->content.message = std::string(yytext); \
    SET_TOKEN_LINE_COLUMN; \
    LOG_TOKEN("strtext"); \
    SAME_LINE_COLUMN_UPDATE; \
} while (false)

#define DELIMITER_TOKEN_GEN \
    GENERAL_TOKEN_GEN(token_type::delimiter, "delimiter")

#define OPERATOR_TOKEN_GEN \
    GENERAL_TOKEN_GEN(token_type::operators, "operator")

#define BRACKET_TOKEN_GEN \
    GENERAL_TOKEN_GEN(token_type::bracket, "bracket")

#define KEYWORD_TOKEN_GEN \
    GENERAL_TOKEN_GEN(token_type::keyword, "keyword")

// indent, integer, floats, identifier, error _TOKEN_GEN are not here



// order:
// make_token -> assign -> SET_TOKEN_LINE_COLUMN -> LOG_... -> ..._COLUMN_UPDATE -> BEGIN(...) -> return t_...
// ..._GEN == ( make_token ~ ..._COLUMN_UPDATE )

#line 1012 "src-gen/compiler_flex.cpp"

#line 1014 "src-gen/compiler_flex.cpp"

#define INITIAL 0
#define LINE_COMMENT 1
#define NEW_LINE_COUNT 2
#define PRODUCE_INDENT 3
#define PRODUCE_DEDENT 4
#define SQUOTE_STR_TEXT 5
#define DQUOTE_STR_TEXT 6
#define SQUOTE_STR_TEXT_END 7
#define DQUOTE_STR_TEXT_END 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (false)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 230 "src/lexer.l"


#line 1242 "src-gen/compiler_flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 291 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1023 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_more_len); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 232 "src/lexer.l"
{ SAME_LINE_COLUMN_UPDATE; }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 234 "src/lexer.l"
{
                totally_new_line = true;
                NEWLINE_TOKEN_GEN;
                BEGIN(NEW_LINE_COUNT);
                return t_newline;
            }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 241 "src/lexer.l"
{  // only use in "# <comment>" after a solid sentense (not just tabs or spaces)
                LOG_TOKEN("comment start sharp");
                SAME_LINE_COLUMN_UPDATE;
                BEGIN(LINE_COMMENT);
            }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 247 "src/lexer.l"
{
                totally_new_line = true;
                NEWLINE_TOKEN_GEN;
                BEGIN(NEW_LINE_COUNT);
                return t_newline;
            }
	YY_BREAK
case YY_STATE_EOF(LINE_COMMENT):
#line 254 "src/lexer.l"
{
                EOF_COLUMN_UPDATE;
                BEGIN(INITIAL);
            }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 259 "src/lexer.l"
{
                LOG_TOKEN("comment");
                SAME_LINE_COLUMN_UPDATE;
            }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 264 "src/lexer.l"
{
                yyless(yyleng - 1);  // strip the spaces and tabs before {new_line}
                totally_new_line = false;
                SAME_LINE_COLUMN_UPDATE;
            }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 270 "src/lexer.l"
{
                totally_new_line = true;
                NEWLINE_TOKEN_GEN;
                return t_newline;
            }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 276 "src/lexer.l"
{  // only use in "# <comment>" after tabs or spaces
                yyless(yyleng - 1);  // strip the spaces and tabs before "#"
                totally_new_line = false;
                SAME_LINE_COLUMN_UPDATE;
            }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 282 "src/lexer.l"
{
                totally_new_line = false;
                LOG_TOKEN("comment start sharp");
                SAME_LINE_COLUMN_UPDATE;
                BEGIN(LINE_COMMENT);
            }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 289 "src/lexer.l"
{
                totally_new_line = false;
                yylval.token_ptr = make_token();
                yylval.token_ptr->type = token_type::indent;
                std::string temp(yytext);
                IDN.space_num = std::count(temp.begin(), temp.end(), ' ');
                IDN.tab_num = std::count(temp.begin(), temp.end(), '\t');

                if (!block_depth_init) {
                    block_depth_init = true;
                    if (IDN.space_num != 0 && IDN.tab_num != 0) {
                        LOG_TOKEN_DENT_ERROR("mix space and tab together", IDN.space_num, IDN.tab_num);
                        block_depth_init = false;  // reinit next time
                        IDN.absolute_depth = last_block_depth;
                    }
                    else if (IDN.space_num != 0 && IDN.tab_num == 0) {
                        block_depth_cell.to_space();
                        block_depth_cell.add(IDN.space_num);
                        IDN.absolute_depth = block_depth_cell.total_depth;
                    }
                    else if (IDN.space_num == 0 && IDN.tab_num != 0) {
                        block_depth_cell.to_tab();
                        block_depth_cell.add(IDN.tab_num);
                        IDN.absolute_depth = block_depth_cell.total_depth;
                    }
                    else {
                        assert(false && "[0] you cannot get here, unless your lex for t_indent is wrong!!!");
                    }
                } else {
                    if (IDN.space_num != 0 && IDN.tab_num != 0) {
                        LOG_TOKEN_DENT_ERROR("mix space and tab together", IDN.space_num, IDN.tab_num);
                        IDN.absolute_depth = block_depth_cell.total_depth;
                    }
                    else if (
                        (!block_depth_cell.use_tab && IDN.space_num != 0 && IDN.tab_num == 0) ||
                        (block_depth_cell.use_tab && IDN.space_num == 0 && IDN.tab_num != 0)
                    ) {
                        int num = block_depth_cell.use_tab ? IDN.tab_num : IDN.space_num;
                        if (num == block_depth_cell.total_num) {
                            IDN.absolute_depth = block_depth_cell.total_depth;
                        } else if (num > block_depth_cell.total_num) {
                            block_depth_cell.add(num - block_depth_cell.total_num);
                            IDN.absolute_depth = block_depth_cell.total_depth;
                        } else {
                            int res = block_depth_cell.get_absolute_depth(num);
                            if (res == -1) {
                                LOG_TOKEN_DENT_ERROR("unindent does not match any outer indentation level", IDN.space_num, IDN.tab_num);
                                IDN.absolute_depth = block_depth_cell.total_depth;
                            } else {
                                bool success = block_depth_cell.del(block_depth_cell.total_depth - res);
                                IDN.absolute_depth = block_depth_cell.total_depth;
                                if (!success) {
                                    assert(false && "[1] you cannot get here, unless your flex is wrong!!!");
                                }
                            }
                        }
                    }
                    else if (IDN.space_num == 0 && IDN.tab_num == 0) {
                        assert(false && "[2] you cannot get here, unless your flex is wrong!!!");
                    }
                    else {
                        // use_tab but space, or not use_tab but tab
                        LOG_TOKEN_DENT_ERROR("unindent does not match any outer indentation level", IDN.space_num, IDN.tab_num);
                        IDN.absolute_depth = block_depth_cell.total_depth;
                    }
                }

                IDN.relative_depth = tmp_dent = IDN.absolute_depth - last_block_depth;
                last_block_depth = IDN.absolute_depth;
                last_ptr = yylval.token_ptr;

                SET_TOKEN_LINE_COLUMN;
                LOG_TOKEN_DENT();
                SAME_LINE_COLUMN_UPDATE;

                if (tmp_dent == 0)
                    BEGIN(INITIAL);
                else if (tmp_dent > 0) {
                    BEGIN(PRODUCE_INDENT);
                } else {
                    tmp_dent = -tmp_dent;
                    BEGIN(PRODUCE_DEDENT);
                }
            }
	YY_BREAK
case YY_STATE_EOF(NEW_LINE_COUNT):
#line 374 "src/lexer.l"
{
                    EOF_COLUMN_UPDATE;
                    BEGIN(INITIAL);
                }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 379 "src/lexer.l"
{
                yyless(0);

                if (totally_new_line) {
                    totally_new_line = false;
                    yylval.token_ptr = make_token();
                    yylval.token_ptr->type = token_type::indent;
                    IDN.space_num = 0;
                    IDN.tab_num = 0;
                    IDN.absolute_depth = 0;
                    IDN.relative_depth = tmp_dent = -last_block_depth;
                    last_block_depth = 0;
                    last_ptr = yylval.token_ptr;
                    block_depth_cell.clear();

                    SET_TOKEN_LINE_COLUMN;
                    LOG_TOKEN_DENT();
                    SAME_LINE_COLUMN_UPDATE;

                    if (tmp_dent == 0)
                        BEGIN(INITIAL);
                    else if (tmp_dent > 0) {
                        BEGIN(PRODUCE_INDENT);
                    } else {
                        tmp_dent = -tmp_dent;
                        BEGIN(PRODUCE_DEDENT);
                    }
                } else {
                    BEGIN(INITIAL);
                }
            }
	YY_BREAK
case YY_STATE_EOF(PRODUCE_INDENT):
#line 411 "src/lexer.l"
{
                yylval.token_ptr = last_ptr;
                LOG_TOKEN_INDENT();
                EOF_COLUMN_UPDATE;
                tmp_dent--;
                if (tmp_dent <= 0)
                    BEGIN(INITIAL);
                return t_indent;
            }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 421 "src/lexer.l"
{
                yyless(0);

                yylval.token_ptr = last_ptr;
                LOG_TOKEN_INDENT();
                tmp_dent--;
                if (tmp_dent <= 0)
                    BEGIN(INITIAL);
                return t_indent;
            }
	YY_BREAK
case YY_STATE_EOF(PRODUCE_DEDENT):
#line 432 "src/lexer.l"
{
                yylval.token_ptr = last_ptr;
                LOG_TOKEN_DEDENT();
                EOF_COLUMN_UPDATE;
                tmp_dent--;
                if (tmp_dent <= 0)
                    BEGIN(INITIAL);
                return t_dedent;
            }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 442 "src/lexer.l"
{
                yyless(0);

                yylval.token_ptr = last_ptr;
                LOG_TOKEN_DEDENT();
                tmp_dent--;
                if (tmp_dent <= 0)
                    BEGIN(INITIAL);
                return t_dedent;
            }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 453 "src/lexer.l"
{
                if (no_eof_yet) {
                    no_eof_yet = false;
                    yylval.token_ptr = make_token();
                    yylval.token_ptr->type = token_type::indent;
                    IDN.space_num = 0;
                    IDN.tab_num = 0;
                    IDN.absolute_depth = 0;
                    IDN.relative_depth = tmp_dent = -last_block_depth;
                    last_block_depth = 0;
                    last_ptr = yylval.token_ptr;
                    block_depth_cell.clear();

                    SET_TOKEN_LINE_COLUMN;
                    LOG_TOKEN_DENT();
                    EOF_COLUMN_UPDATE;

                    if (tmp_dent == 0)
                        BEGIN(INITIAL);
                    else if (tmp_dent > 0) {
                        BEGIN(PRODUCE_INDENT);
                    } else {
                        tmp_dent = -tmp_dent;
                        BEGIN(PRODUCE_DEDENT);
                    }
                } else if (no_newline_before_eof_yet) {
                    no_newline_before_eof_yet = false;
                    EOF_COLUMN_UPDATE;
                    return t_newline;  // always add a new line before EOF
                } else {
                    return 0;
                }
            }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 487 "src/lexer.l"
{
                yylval.token_ptr = make_token();
                yylval.token_ptr->type = token_type::integer;
                yylval.token_ptr->content.data.int_num = translate_python_int(std::string(yytext));
                SET_TOKEN_LINE_COLUMN;
                LOG_TOKEN_WITH_VALUE(
                    "integer (string)", yylval.token_ptr->content.data.int_num
                );
                SAME_LINE_COLUMN_UPDATE;
                return t_number;  // integer
            }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 499 "src/lexer.l"
{
                yylval.token_ptr = make_token();
                yylval.token_ptr->type = token_type::floats;
                yylval.token_ptr->content.data.double_num = std::stod(std::string(yytext));
                SET_TOKEN_LINE_COLUMN;
                LOG_TOKEN_WITH_VALUE(
                    "float (string)", yylval.token_ptr->content.data.double_num
                );
                SAME_LINE_COLUMN_UPDATE;
                return t_number;  // floats
            }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 511 "src/lexer.l"
{
                yylval.token_ptr = make_token();
                yylval.token_ptr->type = token_type::floats;
                yylval.token_ptr->content.data.double_num = std::stod(std::string(yytext));
                SET_TOKEN_LINE_COLUMN;
                LOG_TOKEN_WITH_VALUE(
                    "float (string)", yylval.token_ptr->content.data.double_num
                );
                SAME_LINE_COLUMN_UPDATE;
                return t_number;
            }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 523 "src/lexer.l"
{ yymore(); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 524 "src/lexer.l"
{ yymore(); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 526 "src/lexer.l"
{
                BRACKET_TOKEN_GEN;
                BEGIN(INITIAL);
                return t_bracket_squotes;
            }
	YY_BREAK
case YY_STATE_EOF(SQUOTE_STR_TEXT_END):
#line 532 "src/lexer.l"
{ assert(false && "[3] you cannot get here, unless your flex is wrong!!!"); }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 533 "src/lexer.l"
{ assert(false && "[4] you cannot get here, unless your flex is wrong!!!"); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 535 "src/lexer.l"
{
                yyless(yyleng - 1);
                STRTEXT_TOKEN_GEN;
                BEGIN(SQUOTE_STR_TEXT_END);
                return t_strtext;
            }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 542 "src/lexer.l"
{
                yyless(yyleng - 1);
                LOG_TOKEN_ERROR("single quote does not close");
                BEGIN(INITIAL);
            }
	YY_BREAK
case YY_STATE_EOF(SQUOTE_STR_TEXT):
#line 548 "src/lexer.l"
{
                LOG_TOKEN_ERROR("single quote does not close");
                EOF_COLUMN_UPDATE;
                BEGIN(INITIAL);
            }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 554 "src/lexer.l"
{ yymore(); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 555 "src/lexer.l"
{ yymore(); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 557 "src/lexer.l"
{
                BRACKET_TOKEN_GEN;
                BEGIN(INITIAL);
                return t_bracket_dquotes;
            }
	YY_BREAK
case YY_STATE_EOF(DQUOTE_STR_TEXT_END):
#line 563 "src/lexer.l"
{ assert(false && "[5] you cannot get here, unless your flex is wrong!!!"); }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 564 "src/lexer.l"
{ assert(false && "[6] you cannot get here, unless your flex is wrong!!!"); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 566 "src/lexer.l"
{
                yyless(yyleng - 1);
                STRTEXT_TOKEN_GEN;
                BEGIN(DQUOTE_STR_TEXT_END);
                return t_strtext;
            }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 573 "src/lexer.l"
{
                yyless(yyleng - 1);
                LOG_TOKEN_ERROR("double quote does not close");
                BEGIN(INITIAL);
            }
	YY_BREAK
case YY_STATE_EOF(DQUOTE_STR_TEXT):
#line 579 "src/lexer.l"
{
                LOG_TOKEN_ERROR("double quote does not close");
                EOF_COLUMN_UPDATE;
                BEGIN(INITIAL);
            }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 585 "src/lexer.l"
{ DELIMITER_TOKEN_GEN; return t_delimiter_comma; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 586 "src/lexer.l"
{ DELIMITER_TOKEN_GEN; return t_delimiter_colon; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 587 "src/lexer.l"
{ DELIMITER_TOKEN_GEN; return t_delimiter_arrow; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 588 "src/lexer.l"
{ DELIMITER_TOKEN_GEN; return t_delimiter_semicolon; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 589 "src/lexer.l"
{ DELIMITER_TOKEN_GEN; return t_delimiter_dot; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 590 "src/lexer.l"
{ DELIMITER_TOKEN_GEN; return t_delimiter_3dot; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 592 "src/lexer.l"
{ BRACKET_TOKEN_GEN; BEGIN(SQUOTE_STR_TEXT); return t_bracket_squotes; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 593 "src/lexer.l"
{ BRACKET_TOKEN_GEN; BEGIN(DQUOTE_STR_TEXT); return t_bracket_dquotes; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 594 "src/lexer.l"
{ BRACKET_TOKEN_GEN; return t_bracket_parentheses_l; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 595 "src/lexer.l"
{ BRACKET_TOKEN_GEN; return t_bracket_parentheses_r; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 596 "src/lexer.l"
{ BRACKET_TOKEN_GEN; return t_bracket_square_l; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 597 "src/lexer.l"
{ BRACKET_TOKEN_GEN; return t_bracket_square_r; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 598 "src/lexer.l"
{ BRACKET_TOKEN_GEN; return t_bracket_curly_l; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 599 "src/lexer.l"
{ BRACKET_TOKEN_GEN; return t_bracket_curly_r; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 601 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_add; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 602 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_sub; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 603 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_mul; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 604 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_div; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 605 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_ediv; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 606 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_mod; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 607 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_pow; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 608 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_at; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 609 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_and; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 610 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_or; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 611 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_xor; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 612 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_not; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 613 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_sleft; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 614 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_sright; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 615 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_eq; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 616 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_neq; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 617 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_leq; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 618 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_geq; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 619 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_lt; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 620 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_gt; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 622 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_assign; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 623 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_add_assign; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 624 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_sub_assign; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 625 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_mul_assign; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 626 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_div_assign; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 627 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_ediv_assign; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 628 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_mod_assign; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 629 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_pow_assign; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 630 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_at_assign; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 631 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_and_assign; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 632 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_or_assign; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 633 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_xor_assign; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 634 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_not_assign; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 635 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_sleft_assign; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 636 "src/lexer.l"
{ OPERATOR_TOKEN_GEN; return t_operators_sright_assign; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 638 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_underline; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 639 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_None; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 640 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_True; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 641 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_False; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 643 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_and; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 644 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_or; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 645 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_not; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 646 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_is; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 647 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_in; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 649 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_pass; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 651 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_def; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 652 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_return; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 653 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_yield; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 654 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_class; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 655 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_lambda; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 656 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_await; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 658 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_while; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 659 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_if; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 660 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_else; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 661 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_elif; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 662 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_for; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 663 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_break; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 664 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_continue; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 665 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_match; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 666 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_case; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 668 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_global; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 669 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_nonlocal; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 670 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_del; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 672 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_import; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 673 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_from; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 674 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_as; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 676 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_raise; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 677 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_try; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 678 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_except; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 679 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_finally; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 681 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword_assert; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 683 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword___in; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 684 "src/lexer.l"
{ KEYWORD_TOKEN_GEN; return t_keyword___out; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 686 "src/lexer.l"
{
                yylval.token_ptr = make_token();
                yylval.token_ptr->type = token_type::identifier;
                yylval.token_ptr->content.name = std::string(yytext);
                SET_TOKEN_LINE_COLUMN;
                LOG_TOKEN("identifier");
                SAME_LINE_COLUMN_UPDATE;
                return t_identifier;
            }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 696 "src/lexer.l"
{
                yylval.token_ptr = make_token();
                yylval.token_ptr->type = token_type::error;
                yylval.token_ptr->content.message = "invalid string '" + std::string(yytext) + "'";
                SET_TOKEN_LINE_COLUMN;
                LOG_TOKEN_ERROR("invalid string");
                SAME_LINE_COLUMN_UPDATE;
                return t_error;
            }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 706 "src/lexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2250 "src-gen/compiler_flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 291 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 291 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 290);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 706 "src/lexer.l"


